import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL,
    },
  },
})

// Initial categories for pharmacy store
const initialCategories = [
  {
    name: 'Pain Relief',
    slug: 'pain-relief',
    description: 'ŸÖÿ≥ŸÉŸÜÿßÿ™ ÿßŸÑÿ£ŸÑŸÖ ŸàÿßŸÑÿßŸÑÿ™Ÿáÿßÿ®ÿßÿ™',
    sortOrder: 1,
    isActive: true
  },
  {
    name: 'Vitamins & Supplements',
    slug: 'vitamins-supplements',
    description: 'ŸÅŸäÿ™ÿßŸÖŸäŸÜÿßÿ™ ŸàŸÖŸÉŸÖŸÑÿßÿ™ ÿ∫ÿ∞ÿßÿ¶Ÿäÿ©',
    sortOrder: 2,
    isActive: true
  },
  {
    name: 'Allergy & Sinus',
    slug: 'allergy-sinus',
    description: 'ÿ£ÿØŸàŸäÿ© ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ© ŸàÿßŸÑÿ¨ŸäŸàÿ® ÿßŸÑÿ£ŸÜŸÅŸäÿ©',
    sortOrder: 3,
    isActive: true
  },
  {
    name: 'Digestive Health',
    slug: 'digestive-health',
    description: 'ÿµÿ≠ÿ© ÿßŸÑÿ¨Ÿáÿßÿ≤ ÿßŸÑŸáÿ∂ŸÖŸä',
    sortOrder: 4,
    isActive: true
  },
  {
    name: 'Cold & Flu',
    slug: 'cold-flu',
    description: 'ÿ£ÿØŸàŸäÿ© ŸÜÿ≤ŸÑÿßÿ™ ÿßŸÑÿ®ÿ±ÿØ ŸàÿßŸÑÿ•ŸÜŸÅŸÑŸàŸÜÿ≤ÿß',
    sortOrder: 5,
    isActive: true
  },
  {
    name: 'Prescription Medications',
    slug: 'prescription-medications',
    description: 'ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖŸàÿµŸàŸÅÿ©',
    sortOrder: 6,
    isActive: true
  },
  {
    name: 'Over-the-Counter',
    slug: 'over-the-counter',
    description: 'ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ© ÿ®ÿØŸàŸÜ ŸàÿµŸÅÿ©',
    sortOrder: 7,
    isActive: true
  },
  {
    name: 'Personal Care',
    slug: 'personal-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ©',
    sortOrder: 8,
    isActive: true
  },
  {
    name: 'Health & Wellness',
    slug: 'health-wellness',
    description: 'ÿßŸÑÿµÿ≠ÿ© ŸàÿßŸÑÿπÿßŸÅŸäÿ©',
    sortOrder: 9,
    isActive: true
  },
  {
    name: 'First Aid',
    slug: 'first-aid',
    description: 'ÿßŸÑÿ•ÿ≥ÿπÿßŸÅÿßÿ™ ÿßŸÑÿ£ŸàŸÑŸäÿ©',
    sortOrder: 10,
    isActive: true
  },
  {
    name: 'Baby Care',
    slug: 'baby-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ∑ŸÅŸÑ',
    sortOrder: 11,
    isActive: true
  },
  {
    name: 'Elderly Care',
    slug: 'elderly-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑŸÖÿ≥ŸÜŸäŸÜ',
    sortOrder: 12,
    isActive: true
  },
  {
    name: 'Diabetes Care',
    slug: 'diabetes-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ŸÖÿ±ÿ∂Ÿâ ÿßŸÑÿ≥ŸÉÿ±Ÿä',
    sortOrder: 13,
    isActive: true
  },
  {
    name: 'Heart Health',
    slug: 'heart-health',
    description: 'ÿµÿ≠ÿ© ÿßŸÑŸÇŸÑÿ®',
    sortOrder: 14,
    isActive: true
  },
  {
    name: 'Mental Health',
    slug: 'mental-health',
    description: 'ÿßŸÑÿµÿ≠ÿ© ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©',
    sortOrder: 15,
    isActive: true
  },
  {
    name: 'Women\'s Health',
    slug: 'womens-health',
    description: 'ÿµÿ≠ÿ© ÿßŸÑŸÖÿ±ÿ£ÿ©',
    sortOrder: 16,
    isActive: true
  },
  {
    name: 'Men\'s Health',
    slug: 'mens-health',
    description: 'ÿµÿ≠ÿ© ÿßŸÑÿ±ÿ¨ŸÑ',
    sortOrder: 17,
    isActive: true
  },
  {
    name: 'Skin Care',
    slug: 'skin-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ®ÿ¥ÿ±ÿ©',
    sortOrder: 18,
    isActive: true
  },
  {
    name: 'Hair Care',
    slug: 'hair-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ¥ÿπÿ±',
    sortOrder: 19,
    isActive: true
  },
  {
    name: 'Oral Care',
    slug: 'oral-care',
    description: 'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑŸÅŸÖ ŸàÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ',
    sortOrder: 20,
    isActive: true
  }
]

async function migrateCategories() {
  try {
    console.log('üöÄ Starting category migration...')

    // Create categories
    console.log('üìù Creating categories...')
    for (const categoryData of initialCategories) {
      const existingCategory = await prisma.category.findUnique({
        where: { slug: categoryData.slug }
      })

      if (!existingCategory) {
        await prisma.category.create({
          data: categoryData
        })
        console.log(`‚úÖ Created category: ${categoryData.name}`)
      } else {
        console.log(`‚è≠Ô∏è  Category already exists: ${categoryData.name}`)
      }
    }

    // Get all categories for mapping
    const categories = await prisma.category.findMany()
    const categoryMap = new Map(categories.map(cat => [cat.name.toLowerCase(), cat.id]))

    // Arabic to English category mapping
    const arabicToEnglishMap = {
      'ÿ™ÿ≥ŸÉŸäŸÜ ÿßŸÑÿ¢ŸÑÿßŸÖ': 'Pain Relief',
      'ŸÅŸäÿ™ÿßŸÖŸäŸÜÿßÿ™ ŸàŸÖŸÉŸÖŸÑÿßÿ™ ÿ∫ÿ∞ÿßÿ¶Ÿäÿ©': 'Vitamins & Supplements',
      'ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ© ŸàÿßŸÑÿ¨ŸäŸàÿ® ÿßŸÑÿ£ŸÜŸÅŸäÿ©': 'Allergy & Sinus',
      'ÿµÿ≠ÿ© ÿßŸÑÿ¨Ÿáÿßÿ≤ ÿßŸÑŸáÿ∂ŸÖŸä': 'Digestive Health',
      'ŸÜÿ≤ŸÑÿßÿ™ ÿßŸÑÿ®ÿ±ÿØ ŸàÿßŸÑÿ•ŸÜŸÅŸÑŸàŸÜÿ≤ÿß': 'Cold & Flu',
      'ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖŸàÿµŸàŸÅÿ©': 'Prescription Medications',
      'ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ© ÿ®ÿØŸàŸÜ ŸàÿµŸÅÿ©': 'Over-the-Counter',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ©': 'Personal Care',
      'ÿßŸÑÿµÿ≠ÿ© ŸàÿßŸÑÿπÿßŸÅŸäÿ©': 'Health & Wellness',
      'ÿßŸÑÿ•ÿ≥ÿπÿßŸÅÿßÿ™ ÿßŸÑÿ£ŸàŸÑŸäÿ©': 'First Aid',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ∑ŸÅŸÑ': 'Baby Care',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑŸÖÿ≥ŸÜŸäŸÜ': 'Elderly Care',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ŸÖÿ±ÿ∂Ÿâ ÿßŸÑÿ≥ŸÉÿ±Ÿä': 'Diabetes Care',
      'ÿµÿ≠ÿ© ÿßŸÑŸÇŸÑÿ®': 'Heart Health',
      'ÿßŸÑÿµÿ≠ÿ© ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©': 'Mental Health',
      'ÿµÿ≠ÿ© ÿßŸÑŸÖÿ±ÿ£ÿ©': 'Women\'s Health',
      'ÿµÿ≠ÿ© ÿßŸÑÿ±ÿ¨ŸÑ': 'Men\'s Health',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ®ÿ¥ÿ±ÿ©': 'Skin Care',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ¥ÿπÿ±': 'Hair Care',
      'ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑŸÅŸÖ ŸàÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ': 'Oral Care'
    }

    // Get all products and update their categoryId
    console.log('üîÑ Updating products with category IDs...')
    const products = await prisma.product.findMany()
    
    for (const product of products) {
      const categoryName = product.category
      if (categoryName) {
        // Try direct match first
        let categoryId = categoryMap.get(categoryName.toLowerCase())
        
        // If no direct match, try Arabic to English mapping
        if (!categoryId && arabicToEnglishMap[categoryName]) {
          const englishName = arabicToEnglishMap[categoryName]
          categoryId = categoryMap.get(englishName.toLowerCase())
        }
        
        if (categoryId) {
          await prisma.product.update({
            where: { id: product.id },
            data: { categoryId }
          })
          console.log(`‚úÖ Updated product "${product.name}" with category ID`)
        } else {
          console.log(`‚ö†Ô∏è  No category found for product "${product.name}" with category "${categoryName}"`)
        }
      }
    }

    console.log('üéâ Category migration completed successfully!')
    
    // Print summary
    const totalCategories = await prisma.category.count()
    const totalProducts = await prisma.product.count()
    const productsWithCategoryId = await prisma.product.count({
      where: { categoryId: { not: null } }
    })

    console.log('\nüìä Migration Summary:')
    console.log(`- Total categories: ${totalCategories}`)
    console.log(`- Total products: ${totalProducts}`)
    console.log(`- Products with category ID: ${productsWithCategoryId}`)

  } catch (error) {
    console.error('‚ùå Error during migration:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run migration if this file is executed directly
if (require.main === module) {
  migrateCategories()
    .then(() => {
      console.log('‚úÖ Migration completed successfully')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Migration failed:', error)
      process.exit(1)
    })
}

export { migrateCategories }
